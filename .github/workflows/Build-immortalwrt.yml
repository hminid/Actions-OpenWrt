#Build-immortalwrt
name:  Build-immortalwrt
on:
  workflow_dispatch:
    inputs:
      ssh_debug:
        type: boolean
        description: 'SSH connection to Actions'
        required: false
        default: false
      build_firmware:
        type: boolean
        description: 'build_firmware'
        required: false
        default: false
      workdata_path:
        description: 'workdata_path'
        required: false
        default: 'workdata_immortalwrt'
      workdata_config:
        description: 'workdata_config'
        required: false
        default: 'Abuild.config'

env:
  SSH_ENABLE: ${{inputs.ssh_debug}}
  BUILD_FIRMWARE: ${{inputs.build_firmware}}
  WORKDATA_PATH:  ${{inputs.workdata_path}}
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  CONFIG_FILE: workdata/${{inputs.workdata_config}}
  FEEDS_CONF: workdata/feeds.conf.default
  DIY_P1_SH: workdata/diy-part1.sh
  DIY_P2_SH: workdata/diy-part2.sh
  UPLOAD_DIR: UpFiles
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-20.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: Initialization environment
      run: |
       df -hT
       sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
       sudo timedatectl set-timezone "$TZ"
       sudo mkdir -p /workdir
       sudo chown $USER:$GROUPS /workdir
       sudo mkdir -p workdata
       sudo chown $USER:$GROUPS workdata
       sudo mkdir -p $UPLOAD_DIR
       sudo chown $USER:$GROUPS $UPLOAD_DIR
       [ -e $WORKDATA_PATH ] && sudo mv -f $WORKDATA_PATH/*.* workdata/
       ls -la workdata
       df -hT $PWD

    - name:  apt install
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
       if [ 1 == 1 ] ; then
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
       else
         sudo apt update -y
         sudo apt full-upgrade -y
         sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
         bzip2 ccache clang clangd cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
         g++-multilib git gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev \
         libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev \
         libssl-dev libtool lld lldb lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 \
         python3 python3-pip python3-ply python-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig \
         texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
       fi
       
        # sudo -E apt-get -qq autoremove --purge
        # sudo -E apt-get -qq clean
       
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        ln -sf /workdir/workdata $GITHUB_WORKSPACE/workdata
    
    - name: Load custom feeds DIY_P1_SH
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: Load custom configuration DIY_P2_SH
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "sudo touch /continue"

    - name: SSH connection to Actions EXIT_RUN sudo touch /continue
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.ssh_debug }}

    - name: copy files to UPLOAD_DIR 
      run: |
        [ -e openwrt/.config ] && cp openwrt/.config $UPLOAD_DIR/Abuild.config
        ls -la $UPLOAD_DIR
        pstree
        
    - name: Upload UPLOAD_DIR directory
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.UPLOAD_DIR }}_Abuild.config
        path: ${{ env.UPLOAD_DIR }}

    - name: Download package
      id: package
      if: env.BUILD_FIRMWARE == 'true'
      run: |
        df -hT $PWD
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      id: compile
      if: env.BUILD_FIRMWARE == 'true'
      run: |
        df -hT $PWD
        cd openwrt
        echo -e "$(nproc) thread compile"
        echo "make -j$(nproc) || make -j1 || make -j1 V=s"
        make -j$(nproc)
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files 
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
